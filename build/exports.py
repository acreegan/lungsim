# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _exports
else:
    import _exports

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def export_cubic_lagrange_2d(EXFILE, group_name):
    return _exports.export_cubic_lagrange_2d(EXFILE, group_name)

def export_1d_elem_field(ne_field, EXELEMFILE, group_name, field_name):
    return _exports.export_1d_elem_field(ne_field, EXELEMFILE, group_name, field_name)

def export_1d_elem_geometry(EXELEMFILE, name):
    return _exports.export_1d_elem_geometry(EXELEMFILE, name)

def export_elem_geometry_2d(EXELEMFILE, name, offset_elem, offset_node):
    return _exports.export_elem_geometry_2d(EXELEMFILE, name, offset_elem, offset_node)

def export_node_field(nj_field, EXNODEFIELD, name, field_name):
    return _exports.export_node_field(nj_field, EXNODEFIELD, name, field_name)

def export_terminal_solution(EXNODEFILE, name):
    return _exports.export_terminal_solution(EXNODEFILE, name)

def export_terminal_perfusion(EXNODEFILE, name):
    return _exports.export_terminal_perfusion(EXNODEFILE, name)

def export_terminal_ssgexch(EXNODEFILE, name):
    return _exports.export_terminal_ssgexch(EXNODEFILE, name)

def export_triangle_elements(EXELEMFILE, name):
    return _exports.export_triangle_elements(EXELEMFILE, name)

def export_triangle_nodes(EXNODEFILE, name):
    return _exports.export_triangle_nodes(EXNODEFILE, name)

def export_node_geometry(EXNODEFILE, name):
    return _exports.export_node_geometry(EXNODEFILE, name)

def export_node_geometry_2d(EXNODEFILE, name, offset):
    return _exports.export_node_geometry_2d(EXNODEFILE, name, offset)

def export_data_geometry(EXDATAFILE, name, offset):
    return _exports.export_data_geometry(EXDATAFILE, name, offset)

def export_elem_field(EXELEMFIELD, name, field_name):
    return _exports.export_elem_field(EXELEMFIELD, name, field_name)

