# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _geometry
else:
    import _geometry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def define_elem_geometry_2d(*args) -> "void":
    return _geometry.define_elem_geometry_2d(*args)

def define_node_geometry_2d(NODEFILE: "char const *") -> "void":
    return _geometry.define_node_geometry_2d(NODEFILE)

def import_node_geometry_2d(NODEFILE: "char const *") -> "void":
    return _geometry.import_node_geometry_2d(NODEFILE)

def write_elem_geometry_2d(ELEMFILE: "char const *") -> "void":
    return _geometry.write_elem_geometry_2d(ELEMFILE)

def write_geo_file(ntype: "int", GEOFILE: "char const *") -> "void":
    return _geometry.write_geo_file(ntype, GEOFILE)

def write_node_geometry_2d(NODEFILE: "char const *") -> "void":
    return _geometry.write_node_geometry_2d(NODEFILE)

def define_rad_from_file(*args) -> "void":
    return _geometry.define_rad_from_file(*args)

def define_rad_from_geom(*args) -> "void":
    return _geometry.define_rad_from_geom(*args)

def add_mesh(AIRWAY_MESHFILE: "char const *") -> "void":
    return _geometry.add_mesh(AIRWAY_MESHFILE)

def add_matching_mesh() -> "void":
    return _geometry.add_matching_mesh()

def append_units() -> "void":
    return _geometry.append_units()

def define_1d_elements(ELEMFILE: "char const *") -> "void":
    return _geometry.define_1d_elements(ELEMFILE)

def define_mesh_geometry_test() -> "void":
    return _geometry.define_mesh_geometry_test()

def define_node_geometry(NODEFILE: "char const *") -> "void":
    return _geometry.define_node_geometry(NODEFILE)

def define_data_geometry(DATAFILE: "char const *") -> "void":
    return _geometry.define_data_geometry(DATAFILE)

def import_ply_triangles(ply_file: "char const *") -> "void":
    return _geometry.import_ply_triangles(ply_file)

def make_data_grid(elemlist_len: "int", offset: "double", spacing: "double", filename: "char const *", groupname: "char const *") -> "void":
    return _geometry.make_data_grid(elemlist_len, offset, spacing, filename, groupname)

def make_2d_vessel_from_1d(elemlist_len: "int") -> "void":
    return _geometry.make_2d_vessel_from_1d(elemlist_len)

def get_local_node_f(ndimenstion: "char const *", np_global: "char const *") -> "int":
    return _geometry.get_local_node_f(ndimenstion, np_global)

def element_connectivity_1d() -> "void":
    return _geometry.element_connectivity_1d()

def evaluate_ordering() -> "void":
    return _geometry.evaluate_ordering()

def volume_of_mesh(volume_model: "double *", volume_tree: "double *") -> "void":
    return _geometry.volume_of_mesh(volume_model, volume_tree)


